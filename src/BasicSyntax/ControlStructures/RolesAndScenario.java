//package BasicSyntax.ControlStructures;
//
//public class RolesAndScenario {
//
//    // https://stepik.org/lesson/12762/step/10?unit=3110
//
//    // Вам дан список ролей и сценарий пьесы в виде массива строчек.
//
//    // Каждая строчка сценария пьесы дана в следующем виде:
//    // Роль: текст
//
//    // Текст может содержать любые символы.
//
//    // Напишите метод, который будет группировать строчки по ролям, пронумеровывать их и возвращать результат в виде
//    // готового текста (см. пример). Каждая группа распечатывается в следующем виде:
//
//    // Роль:
//    // i) текст
//    // j) текст2
//    // ...
//    // ==перевод строки==
//
//    // i и j -- номера строк в сценарии. Индексация строчек начинается с единицы, выводить группы следует в соответствии с
//    // порядком ролей. Переводы строк между группами обязательны, переводы строк в конце текста не учитываются.
//
//    // Заметим, что вам предстоит обработка огромной пьесы в 50 000 строк для 10 ролей - соответственно, неправильная
//    // сборка результирующей строчки может выйти за ограничение по времени.
//
//    // Обратите внимание еще на несколько нюансов:
//    // * имя персонажа может встречаться в строке более одного раза, в том числе с двоеточием;
//    // * название одной роли может быть префиксом названия другой роли (например, "Лука" и "Лука Лукич");
//    // * роль, у которой нет реплик, тоже должна присутствовать в выходном файле;
//    // * в качестве перевода строки надо использовать символ '\n' (перевод строки в стиле UNIX);
//    // * будьте внимательны, не добавляйте лишних пробелов в конце строк.
//
//    // Sample Input:
//    // roles:
//    // Городничий
//    // Аммос Федорович
//    // Артемий Филиппович
//    // Лука Лукич
//    // textLines:
//    // Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
//    // Аммос Федорович: Как ревизор?
//    // Артемий Филиппович: Как ревизор?
//    // Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
//    // Аммос Федорович: Вот те на!
//    // Артемий Филиппович: Вот не было заботы, так подай!
//    // Лука Лукич: Господи боже! еще и с секретным предписаньем!
//
//    // Sample Output:
//    // Городничий:
//    // 1) Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
//    // 4) Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
//
//    // Аммос Федорович:
//    // 2) Как ревизор?
//    // 5) Вот те на!
//
//    // Артемий Филиппович:
//    // 3) Как ревизор?
//    // 6) Вот не было заботы, так подай!
//
//    // Лука Лукич:
//    // 7) Господи боже! еще и с секретным предписаньем!
//
//    // Для успешного прохождения текста №№.
//    // Входные данные (stdin):
//    public static String[] my_roles = { "Городничий", "Аммос Федорович", "Артемий Филиппович", "Лука Лукич" };
//    public static String[] my_textLines =   {
//            "Городничий: Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.",
//            "Аммос Федорович: Как ревизор?", "Артемий Филиппович: Как ревизор?",
//            "Городничий: Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.",
//            "Аммос Федорович: Вот те на!", "Артемий Филиппович: Вот не было заботы, так подай!",
//            "Лука Лукич: Господи боже! еще и с секретным предписаньем!",
//            "Городничий: Господа, сообщаю вам пренеприятное известие, его поведал мне Артемий Филиппович: к нам едет ревизор."
//    };
//    // Выходные данные (stdout):
//    // Городничий:
//    // 1) Я пригласил вас, господа, с тем, чтобы сообщить вам пренеприятное известие: к нам едет ревизор.
//    // 4) Ревизор из Петербурга, инкогнито. И еще с секретным предписаньем.
//    // 8) Господа, сообщаю вам пренеприятное известие, его поведал мне Артемий Филиппович: к нам едет ревизор.
//
//    // Аммос Федорович:
//    // 2) Как ревизор?
//    // 5) Вот те на!
//
//    // Артемий Филиппович:
//    // 3) Как ревизор?
//    // 6) Вот не было заботы, так подай!
//
//    // Лука Лукич:
//    // 7) Господи боже! еще и с секретным предписаньем!
//
//    // В тесте №3 может падать потому что:
//    // роли могут быть такими
//    // роль1
//    // роль1 замена
//    // когда фильтруешь строку можешь не ту роль взять
//
//    // Роли в строках могут быть такими:
//    // "Аммос Федорович: /тут реплика", а могут быть такими: "Аммос Федорович замена: /тут реплика".
//    // Короче когда ищете в первоначальных строках с репликами имя роли, добавляйте двоеточие.
//
//    // @Anonymous_2099990 прав
//    // проверяйте так
//    // if(stroka.startsWith(roles[i]+":")) // вот тут если не будет ":" может похожая роль проскочить
//    // {
//    //     добавляем индекс + вырезаем роль
//    // }
//    // @Maksim_Budilovskiy
//    // хм, пробелы вообще нигде не используй
//    // 1)if используй startsWith(role+:) без всяких пробелов
//    // 2) вырезай с помощью replaceFirst(role+:)/substring(length+1) без всяких пробелов
//    // то должно все работать по идее
//
//
//    private String printTextPerRole(String[] roles, String[] textLines) {
//
//
//
//
//
//
//
//
//        return "";
//    }
//
//
//
//
//
//
//
//
//
//}
